#ifndef REGISTER_LOGIN_GUARD__H 
#define REGISTER_LOGIN_GUARD__H

#include <stdio.h>
#include "book_management.h"

#define MAX 20 //The maximum number of loans

struct User
{
    char* name; //name of the user
    char* username; //username of the user
    char* password; //password of the user
    char* email;

    // struct BookArray borrowed_by_user; //array of books borrowd by this user
};



struct UserArray
{
    struct User* array; //pointer to the array of struct book
    unsigned int length; //number of users
};


struct Loan
{
    unsigned int ID; // id of the book
    char* title; // title of loaned book
    char* authors; // authors of loaned book
    char* user_id; // id of person who loaned it
};

unsigned int loan_length; // number of loans
struct Loan all_loans[MAX];

// delete a loan
// returns 0 if successful
int delete_loan(unsigned int ID, char* user_id);

// add a loan to all loans
// returns 0 if successful
int add_loan(unsigned int ID, char* title, char* authors, char* user_id);

// To check if you already have loaned this book
// return 0 if not
int loaned_already(unsigned int ID, char* user_id);

//Registering users
//return 0 if registerd correctly
int register_user();

//Logging in users
//returns 0 if everything works correctly
int login_user();


//logged in as a Librarian
int librarian_function();

//Logged in as a normal user
//return 0 if user not found
int user_function(struct User* user);


//Find user by username
struct User* find_user(char* username);

//Add user
//return 0 if user is added successfully
void add_user(char* name, char* username, char* password, char* email);

//Borrow books
//return 0 if successful otherwise return 1;
int borrow_book(struct User user);

//Return book
//return 0 if successful otherwise return 1;
int return_book(struct User user);

//Ask questions
char *ask_question(const char *question);

//saves the database of users in the specified file
//returns 0 if users were stored correctly, or an error code otherwise
int store_users(FILE *file);

//loads the database of users from the specified file
//the file must have been generated by a previous call to store_users()
//returns 0 if users were loaded correctly, or an error code otherwise
int load_users(FILE *file);

//saves the database of loans in the specified file
//returns 0 if loans were stored correctly, or an error code otherwise
int store_loans(FILE *file);

//loads the database of loans from the specified file
//the file must have been generated by a previous call to store_loans()
//returns 0 if loans were loaded correctly, or an error code otherwise
int load_loans(FILE *file);

#endif